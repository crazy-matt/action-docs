title = "gitleaks config"

#--------------- GitHub ---------------
[[rules]]
    description = "Github Personal Access Token"
    regex = '''ghp_[0-9a-zA-Z]{36}'''
    tags = ["key", "Github"]

[[rules]]
    description = "Github OAuth Access Token"
    regex = '''gho_[0-9a-zA-Z]{36}'''
    tags = ["key", "Github"]

[[rules]]
    description = "Github App Token"
    regex = '''(ghu|ghs)_[0-9a-zA-Z]{36}'''
    tags = ["key", "Github"]

[[rules]]
    description = "Github Refresh Token"
    regex = '''ghr_[0-9a-zA-Z]{76}'''
    tags = ["key", "Github"]

[[rules]]
    description = "Github"
    regex = '''(?i)github(.{0,20})?(?-i)['\"][0-9a-zA-Z]{35,40}['\"]'''
    tags = ["key", "Github"]

#--------------- Google ---------------
[[rules]]
    description = "Google API key"
    regex = '''AIza[0-9A-Za-z\\-_]{35}'''
    tags = ["key", "Google"]

[[rules]]
    description = "Google (GCP) Service Account"
    regex = '''"type": "service_account"'''
    tags = ["key", "Google"]
    [rules.allowlist]
        paths = ['''(.*?)credscan-config.toml$''']

#--------------- AWS ---------------
[[rules]]
    description = "AWS Access Key"
    regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'''
    tags = ["key", "AWS"]

[[rules]]
    description = "AWS Secret Key"
    regex = '''(?i)aws(.{0,20})?(?-i)['\"][0-9a-zA-Z\/+]{40}['\"]'''
    tags = ["key", "AWS"]

[[rules]]
    description = "AWS cred file info"
    regex = '''(?i)(aws_access_key_id|aws_secret_access_key)(.{0,20})?=.[0-9a-zA-Z\/+]{20,40}'''
    tags = ["AWS"]

[[rules]]
    description = "AWS MWS key"
    regex = '''amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
    tags = ["key", "AWS", "MWS"]

#--------------- Slack ---------------
[[rules]]
    description = "Slack"
    regex = '''xox[baprs]-([0-9a-zA-Z]{10,48})?'''
    tags = ["key", "Slack"]

[[rules]]
    description = "Slack Webhook"
    regex = '''https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'''
    tags = ["key", "slack"]

#--------------- Twilio ---------------
[[rules]]
    description = "Twilio API key"
    regex = '''(?i)twilio(.{0,20})?SK[0-9a-f]{32}'''
    tags = ["key", "twilio"]

[[rules]]
    description = "Asymmetric Private Key"
    regex = '''-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'''
    tags = ["key", "AsymmetricPrivateKey"]

#--------------- Emails ---------------
[[rules]]
    description = "Email"
    regex = '''[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}'''
    tags = ["email"]
    [rules.allowlist]
        # paths = ['''(?i)bashrc'''] # Example of allow on a file
        # description = "ignore bashrc emails"
        description = "ignore gitconfig emails"
        regexes = [
            '''[a-zA-Z0-9._%+-]+@users.noreply.github.com''',
            '''git@github.com''',
            '''git@gitlab.com''',
            '''(.*?)Copyright(.*?)''',
            '''(.*?)Co-authored-by:(.*?)''',
            '''(.*?)@example.com''',
            '''(.*?)@domain.tld''',
            '''alice@gmail.com''',
            '''joe@gmail.com''',
            '''example(.*?)@google.com''',
            '''(.*?)# scan:ignore''',
        ]

#-------------- Variables --------------
[[rules]]
    description = "Env Var"
    regex = '''(?i)(apikey|secret|password|certificate_osx_p12|certificate_password|codacy_project_token|coveralls_api_token|coveralls_repo_token|coveralls_token|coverity_scan_token|cypress_record_key|database_password|db_password|deploy_password|deploy_token|digitalocean_access_token|docker_hub_password|docker_password|dockerhub_password|sonatype_password|firebase_api_token|firebase_token|firefox_secret|flask_secret_key|fossa_api_key|gcloud_service_key|gcr_password|gh_api_key|gh_next_oauth_client_secret|gh_next_unstable_oauth_client_secret|gh_oauth_client_secret|gpg_private_key|gpg_passphrase|gpg_secret_keys|heroku_api_key|okta_client_token|pypi_password|sonatype_nexus_password|travis_token|refresh_token|client_id|client_secret)(.*)?[(:=](\s)?['\"][0-9a-zA-Z-_!$^%=]{10,120}['\")]'''
    tags = ["key", "env"]
    entropy = 4.2
    [rules.allowlist]
        description = "ignore default"
        regexes = [
            '''(?i)(expect|assert|yourpassword|foo|bar)''',
            '''(.*?)# scan:ignore''',
        ]

[[rules]]
    description = "Potential bash var"
    regex='''(?i)(=)([0-9a-zA-Z-_!{}=]{7,120})'''
    tags = ["key", "bash", "API", "generic"]
    entropy = 3.8
    secretGroup = 2
    [rules.allowlist]
        description = "ignore default"
        regexes = ['''(.*?)(# scan:ignore)''']

[[rules]]
    description = "Generic Credential"
    regex = '''(?i)(apikey|auth|dbhost|dbname|dbpasswd|dbuser|guid|hostname|key|password|pw|user)(.{0,20})?[\"]([0-9a-zA-Z-._{}$\/\+/=!@#$%^&*]{7,120})[\"]'''
    entropy = 4.2
    tags = ["key", "API", "generic"]
    [rules.allowlist]
        description = "ignore default"
        regexes = [
            '''(.*?)# scan:ignore''',
            '''(.*?)AUTHOR=''',
            '''allAuthenticatedUsers''',
            '''keys\((.*?)''',
            '''key(}?)(.*?)''',
        ]
        paths = [
            '''(.*?)credscan-config.toml$''',
        ]

#--------------- Files ---------------
[[rules]]
    description = "Files with keys and credentials"
    path = '''(.*?)(_unencrypted|id_rsa|id_rsa.pub|key|passwd|pem|pgpass|ppk|shadow)$'''
    #               ^^ _unencrypted: sops implementation
    tags = ["key", "sops"]

#------- Unencrypted sops secrets files ------
[[rules]]
    description = "SOPS config"
    #regex = '''.*'''
    path = '''(.*?)config.enc.yaml$'''
    regex = '''^([^A]|A(A|E(A|S(A|2(A|5(A|6(A|_(A|G(A|CA))))))))*([^AE]|E([^AS]|S([^2A]|2([^5A]|5([^6A]|6([^A_]|_([^AG]|G([^AC]|C[^AM])))))))))*(A(A|E(A|S(A|2(A|5(A|6(A|_(A|G(A|CA))))))))*(E(S?|S2(5?|56(_?|_GC?))))?)?$|^([^E]|E(E|NE)*([^EN]|N[^CE]))*(E(E|NE)*N?)?$'''
    # Built from 2 blocks generated using http://www.formauri.es/personal/pgimeno/misc/non-match-regex/
    # <block negating AES256_GCM see http://www.formauri.es/personal/pgimeno/misc/non-match-regex/?word=AES256_GCM>|<block negating ENC, see http://www.formauri.es/personal/pgimeno/misc/non-match-regex/?word=ENC>
    # Explanation: !(AES256_GCM AND ENC) <=> (!AES256_GCM) OR (!ENC)
    # Why all this? Because the go regex implementation does not support lookaheads/lookbehinds.
    tags = ["sops"]

#--------------- Entropy ---------------
[[rules]]
    description = "entropy and regex"
    regex = '''([:][" "]+?|[\"])([0-9a-zA-Z-._{}$\/\+/=!@#$%^&*]{7,120})[\"]?'''
    tags = ["entropy"]
    entropy = 4.2
    secretGroup = 1
    [rules.allowlist]
        description = "ignore default"
        regexes = [
            '''(.*?)# scan:ignore''',
        ]
        paths = [
            '''(.*?).sops.yaml$''',
            '''(.*?)config.enc.yaml$''',
        ]

#--------------- Global Allow Section ---------------
[allowlist]
    description = "image allowlists"
    paths = [
        '''(.*?)(jpg|png|gif|doc|pdf)$''',
        '''(.*?)(.history)(.*?)$''',
    ]
    regexes = ['''(.*?)# scan:ignore''']
